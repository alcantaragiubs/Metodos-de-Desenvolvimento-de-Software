import Head from "next/head";
import Typography from "@mui/material/Typography";
import Link from "@mui/material/Link";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import React, { useState, ChangeEvent, useContext } from "react";
import Container from "@mui/material/Container";
import CssBaseline from "@mui/material/CssBaseline";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import { useRouter } from "next/router";
import Alert from "@mui/material/Alert";
import CloseIcon from "@mui/icons-material/Close";
import IconButton from "@mui/material/IconButton";
import Collapse from "@mui/material/Collapse";
import { useForm } from "react-hook-form";
import { AuthContext } from "../context/AuthContext";
const theme = createTheme();

export default function Login() {
  const [data, setData] = useState<any>({});
  const [errors, setErrors] = useState<any>({});
  const router = useRouter();
  const [open, setOpen] = useState(false);
  const [close, setClose] = useState(false);
  const [errorMessage, setErrorMessage] = useState<any>("");
  const { register, handleSubmit } = useForm();
  const { signIn } = useContext(AuthContext);

  const handleText = (e: ChangeEvent<HTMLInputElement>) => {
    setData({ ...data, [e.target.name]: e.target.value });
    let tempErrors = errors;
    delete tempErrors[e.target.name];
    setErrors(tempErrors);
  };
  const handleCheckData = () => {
    const { username, senha } = data;
    let emptyFields: any = {};

    if (!username || username.length === 0) {
      emptyFields.username = "O campo de e-mail não pode ser vazio";
    }
    if (!senha || senha.length === 0) {
      emptyFields.senha = "O campo de senha não pode ser vazio";
    }
    if (Object.keys(emptyFields).length > 0) {
      setErrors(emptyFields);
      return 1;
    }
    return 0;
  };

  async function handleSignIn(data) {
    await signIn(data)
  }
  return (
    <ThemeProvider theme={theme}>
      <Container component="main" maxWidth="xs">
        <CssBaseline />
        <Box
          sx={{
            marginTop: 20,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <Head>
            <title>Galdi</title>
            <meta name="description" content="Generated by meio a meio" />
            <link rel="icon" type="image/png" href="/favicon.ico" />
          </Head>
          <Typography component="h1" variant="h5">
            Administrador, entrar no sistema:
          </Typography>
          <Box
            component="form"
            onSubmit={handleSubmit(handleSignIn)}
            noValidate
            sx={{ mt: 1 }}
          >
            <TextField
              {...register("username")}
              margin="normal"
              required
              fullWidth
              id="username"
              label="E-mail"
              name="username"
              type="email"
              autoComplete="username"
              value={data ? data.username : ""}
              error={errors.username ? true : false}
              helperText={errors.username || null}
              onChange={handleText}
              autoFocus
            />
            <TextField
              {...register("password")}
              margin="normal"
              required
              fullWidth
              name="password"
              label="Senha"
              type="password"
              id="password"
              autoComplete="current-password"
              value={data ? data.password : ""}
              error={errors.password ? true : false}
              helperText={errors.password || null}
              onChange={handleText}
            />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              Entrar
            </Button>
            <Collapse in={open}>
              <Alert
                severity="success"
                action={
                  <IconButton
                    aria-label="close"
                    color="inherit"
                    size="small"
                    onClick={() => {
                      setOpen(false);
                    }}
                  >
                    <CloseIcon fontSize="inherit" />
                  </IconButton>
                }
                sx={{ mb: 2 }}
              >
                Login realizado com sucesso!
              </Alert>
            </Collapse>
            <Collapse in={close}>
              <Alert
                severity="error"
                action={
                  <IconButton
                    aria-label="close"
                    color="inherit"
                    size="small"
                    onClick={() => {
                      setClose(false);
                    }}
                  >
                    <CloseIcon fontSize="inherit" />
                  </IconButton>
                }
                sx={{ mb: 2 }}
              >
                {errorMessage}
              </Alert>
            </Collapse>
            <Grid container>
              <Grid item>
                <Link href="/administrador/cadastro" variant="body2">
                  {"Não possui uma conta? Inscreva-se"}
                </Link>
              </Grid>
            </Grid>
          </Box>
        </Box>
      </Container>
    </ThemeProvider>
  );
}
